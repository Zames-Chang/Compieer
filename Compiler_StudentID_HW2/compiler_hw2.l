/* Definition section */
%{
#include "y.tab.h"	/* header file generated by bison */

extern YYSTYPE yylval; //YYSTYPE
char buf[BUF_SIZE];

int num_lines = 0;
int num_comments = 0;

void printT(char *s){
	int len = strlen(yytext);
	for(int i=0 ;i<len;i++){
		if(yytext[i] != ' ' && yytext[i] != '\t') printf("%c",yytext[i]);	
	}
	printf(" \t %s\n", s);
}
/* This macro is used to record code line */
#define CONCAT { strncat(buf, yytext, BUF_SIZE - strlen(buf) - 1); }
%}

/* Define regular expression label */
digit		[0-9]
letter		[a-zA-Z]
integer     {digit}+
float       {digit}+"."{digit}+
id			{letter}+({letter}|{digit})*

%option yylineno

%x COMMENT STRING_STATE

/* Rules section */
%%

 /* Arithmetic */
 "+"				{printT("ADD");}     
"-"				{printT("SUB");}     
"*"				{printT("MUL");}     
"/"				{printT("DIV");}
"%"             {printT("MOD");}
"++"				{printT("INC");} 
"--"				{printT("DEC");} 


 /* Relational */
">"				{printT("MT");}       
"<"				{printT("LT");}     
">="				{printT("MTE");} 
"<="				{printT("LTE");} 
"=="				{printT("EQ");} 
"!="				{printT("NE");}

 /* Assignment */
"="             {printT("ASGN");} 
"+="             {printT("ADDASGN");} 
"-="             {printT("SUBASGN");} 
"*="             {printT("MULASGN");}  
"/="             {printT("DIVASGN");} 
"%="             {printT("MODASGN");} 

 /* Logical */
"&&"            {printT("AND");} 
"||"            {printT("OR");}
"!"            {printT("NOT");}

 /* Delimiters */
"("            {printT("LB");}
")"            {printT("RB");}
"{"				{printT("LCB");}
"}"				{printT("RCB");}
"["		{ printT("LSB"); }
"]"		{ printT("LSB"); }
","		{ printT("COMMA"); }

 /* Print Keywords */	
"print"				{printT("PRINT");}

 /* Condition and Loop Keywords */
"if"					{printT("IF"); }
"else"					{printT("ELSE");}
"while"					{printT("WHILE");}
"for"                   {printT("FOR");}

 /* Declaration Keywords */
"void"					{printT("VOID");}
"int"					{printT("INT");}
"float"					{printT("FLOAT");}
"string"    {printT("STRING");}
"bool"					{printT("BOOL");}

 /* boolean Keywords */
"true"					{printT("TRUE");}
"false"					{printT("FALSE");}

"return"					{printT("RETURN");}

 /* String Constant */
\"				        { BEGIN STRING_STATE; }
<STRING_STATE>\"		{ BEGIN INITIAL; }
<STRING_STATE>[^"]*		{  }

 /* Number Constant */
{integer}	{  }
{float}	    {  }

 /* C type Comment */
"/*"				{ BEGIN COMMENT; }
<COMMENT>[^*\n]+	{  }
<COMMENT>\n			{  }
<COMMENT>"*"		{  }
<COMMENT>"*/"		{  BEGIN INITIAL; }

 /* C++ type Comment */
\/\/.*	{  }

 /* Variable ID */
 {id}       {  }

 /* others */

[;]         {  }
[\n]        {  }
[ \t]		{ } /* Ignore */
[^ \t\n] 	{ } /* Ignore other charactor sets */
<<EOF>>     { }

%%

int yywrap()
{
    return 1;
}
